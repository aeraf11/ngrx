NgRx

ng add @ngrx/store
added to app.module:
StoreModule.forRoot({}, {})

In product.module: in imports:
StoreModule.forFeature('products', {})

create state folder in products =>
in state => product.reducer.ts
then code:
export const productReducer = createReducer(
    {showProductCode: true},
    on(createAction('[Product], Toggle Product'), state => {
        return {
            ...state,
            showProductCode: !state.showProductCode
        }
    })
);

in product.module change:
StoreModule.forFeature('products', productReducer);

to dispetch action/reducer:
open product-list.component.ts: add to ctor:
private store: Store<any>,
and change code:

  checkChanged(): void {
    this.store.dispatch({type:'[Product], Toggle Product'});
    // this.displayCode = !this.displayCode;
  }

In ngInit add code: 
    //TODO unsubscribe:
    this.store.select('products').subscribe(products => {
      if(products) {
        this.displayCode = products.showProductCode;
      }
    })


Strongly Typed State:

In product.reducer.ts: add:
export interface ProductState {
    showProductCode: boolean;
    currentProduct: Product;
    products: Product[];
}

in app folder create:
state/app.state.ts and define entire store state as:
export interface State {
    products: ProductState,
    user: UserState;
}

For Lazyloading add code in product.reducer.ts as:
import * as AppState from '../../state/app.state'

export interface State extends AppState.State {
    products: ProductState;
}

change productReducer as:
export const productReducer = createReducer<ProductState>(
    {showProductCode: true} as ProductState,
    on(createAction('[Product], Toggle Product'), (state):ProductState  => {
        return {
            ...state,
            showProductCode: !state.showProductCode
        }
    })
);

in product-list.component.ts change:
private store: Store<any>,
to 
private store: Store<State>, // where State is imported from productReducer

define initial state in product.reducer.ts as:
const initialState: ProductState = {
    showProductCode: true,
    currentProduct: null,
    products: []
}
and change line:
    {showProductCode: true} as ProductState,
as 
    initialState,

in product-list.component.ts: remove if from this.state.select and code change as:
  this.store.select('products').subscribe( //now we have to remove hardcoded products here
      products => this.displayCode = products.showProductCode
    )
  }

Creating Selector:
in product.reducer.ts 
const getProductFeatureState = createFeatureSelector<ProductState>('products');
export const getShowProductCode = createSelector(
    getProductFeatureState,
    state => state.showProductCode
);
export const getCurrentProduct = createSelector(
    getProductFeatureState,
    state => state.currentProduct
);
export const getProducts = createSelector(
    getProductFeatureState,
    state => state.products
);

Using Selectors:
In product-list.component.ts:
  this.store.select(getShowProductCode).subscribe( 
      showProductCode => this.displayCode = showProductCode
    )
  }


Actions:

create file product.actions.ts in product.state and code:
import { createAction, props } from "@ngrx/store";
import { Product } from "../product";

export const toggleProductCode      = createAction('[Product], Toggle Product');
export const setCurrentProduct      = createAction('[Product], Set Current Product', props<{product: Product}>());
export const clearCurrentProduct    = createAction('[Product], Clear Current Product');
export const initCurrentProduct     = createAction('[Product], Init Current Product');
export const loadProducts           = createAction('[Product], Load');
export const loadProductsSuccess    = createAction('[Product], Load Success');
export const loadProductsFailure    = createAction('[Product], Load Failure');

then in reducer
instead of 
 on(createAction('[Product], Toggle Product'), (state):ProductState  => {
use
 on(ProductAction.toggleProductCode, (state):ProductState  => {
and define other actions as:
    on(ProductAction.toggleProductCode, (state):ProductState  => {
        return {
            ...state,
            showProductCode: !state.showProductCode
        }
    }),
    on(ProductAction.setCurrentProduct, (state, action): ProductState => {
        return{
            ...state,
            currentProduct: action.product
        }
    }),
    on(ProductAction.clearCurrentProduct, (state): ProductState => {
        return{
            ...state,
            currentProduct: null
        }
    }),
    on(ProductAction.initCurrentProduct, (state): ProductState => {
        return {
            ...state,
            currentProduct: initialProduct
        }
    })
then in product-list.component.ts in productsChecked() change:
this.store.dispatch({type:'[Product], Toggle Product'}); 
to
this.store.dispatch(ProductAction.toggleProductCode());

Actions & selectors:
In product-list.component.ts in productSelected change from:
this.productService.changeSelectedProduct(product);
to
this.store.dispatch(ProductAction.setCurrentProduct({product}));
and for newProduct change from:
this.productService.changeSelectedProduct(this.productService.newProduct());
to
this.store.dispatch(ProductAction.initCurrentProduct());
then in ngInit() change from: 
    this.sub = this.productService.selectedProductChanges$.subscribe(
      currentProduct => this.selectedProduct = currentProduct
    );
to
    this.store.select(getCurrentProduct).subscribe(
      currentProduct => this.selectedProduct = currentProduct
    );

then remove subscription:

Use Actions and Selectors in product-edit.component.ts:
first add store to constructor as:
constructor(private store: Store<State>,
remove sub/subscribe stuff everywhere,
then modify ngOnInit() as:
use getCurrentProduct selector instead of sub code as:
this.store.select(getCurrentProduct).subscribe(...

then in deleteProduct change from:
          next: () => this.productService.changeSelectedProduct(null),
to
          next: () => this.store.dispatch(ProductAction.clearCurrentProduct()),
In saveProduct change from:
            next: p => this.productService.changeSelectedProduct(p),
to
            next: p => this.store.dispatch(ProductAction.setCurrentProduct({product: p})),
Then delete behavior subject and its observables from productService:

Effects:

create file product.effects.ts and code as:
import { Injectable } from "@angular/core";
import { Actions, createEffect, ofType } from "@ngrx/effects";
import { ProductService } from "../product.service";
import * as ProductActions from './product.actions';
import { map, mergeMap } from "rxjs/operators";

@Injectable()
export class ProductEffects {

    constructor(private action$: Actions, private productService: ProductService) {}

    loadProducts$ = createEffect(()=>{
        return this.action$.pipe(
            ofType(ProductActions.loadProducts),
            mergeMap(()=> this.productService.getProducts().pipe(
                map(products => ProductActions.loadProductsSuccess({products}))
            ))
        )
    })
}
in product.service.ts remove products

in products.module.ts in imports add:
    EffectsModule.forFeature([ProductEffects])

in product-list.component.ts delete 
this.productSelected.getProducts() in ngOnInit() method.
and add:
    this.store.dispatch(ProductAction.loadProducts());
    this.products$ = this.store.select(getProducts);
and delete products$ property
and change products$ to:
  products$: Observable<Product[]>;

in product-list.component.html change from:
  <div class="card-body" *ngIf="products?.length">
to
  <div class="card-body" *ngIf="products$ | async as products">

in product-list.component.ts in onNgInit() change from :
     this.store.select(getCurrentProduct).subscribe(
      currentProduct => this.selectedProduct = currentProduct
    );
to 
    this.selectedProduct$ = this.store.select(getCurrentProduct)
and delete property selectedProduct$
and change from :
  //TODO unsubscribe:
  this.store.select(getShowProductCode).subscribe( 
      showProductCode => this.displayCode = showProductCode
    )
to
this.displayCode$ = this.store.select(getShowProductCode);
then remove from ctor 
, private productService: ProductService
then delete
products, selectedProduct declarations

in product-list.component.html change selectedProduct & displayCode to async as:
              [ngClass]="{'active': product?.id === (selectedProduct$ | async)?.id}"
and 
        <ng-container *ngIf="displayCode$ | async">
and 
                 [checked]="displayCode$ | async">
In product-edit.component.ts change from:
    this.store.select(getCurrentProduct).subscribe(
      currentProduct => this.displayProduct(currentProduct)
    );
to
    this.product$ = this.store.select(getCurrentProduct).pipe(
      tap(
        currentProduct => this.displayProduct(currentProduct)
      )
    )
and deleteProperty product$ and set product$ as:
  product$: Observable<Product>;

in product.effects.ts add error handling work:
 catchError(error => of(ProductActions.loadProductsFailure({error})))

in reducer code as:
export const getError = createSelector(
    getProductFeatureState,
    state => state.error
)
    on(ProductAction.loadProductsFailure, (state, action): ProductState => {
        return{
            ...state,
            products: [],
            error: action.error
        }
    })

In product-list.component.ts add in ngOnInit() as:
    this.displayCode$ = this.store.select(getShowProductCode);

in product-list-component.html
	<div *ngIf="errorMessage$ | async as errorMessage"










